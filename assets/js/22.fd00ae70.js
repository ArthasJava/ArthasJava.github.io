(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{520:function(s,a,t){"use strict";t.r(a);var n=t(6),v=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("本文大部分内容来自 "),t("a",{attrs:{href:"https://juejin.cn/post/6844904069702615054",target:"_blank",rel:"noopener noreferrer"}},[s._v("JVM解毒——类加载子系统"),t("OutboundLink")],1)])]),t("h2",{attrs:{id:"类加载子系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载子系统"}},[s._v("#")]),s._v(" 类加载子系统")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/0082zybply1gbzlnjzayoj30u00wpwn7.jpg",alt:"类加载子系统图"}})]),s._v(" "),t("p",[t("strong",[s._v("Java 虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是虚拟机的加载机制。")])]),s._v(" "),t("p",[s._v("Class 文件由类装载器装载后，在 JVM 中将形成一份描述 Class 结构的元信息对象，通过该元信息对象可以获知 Class 的结构信息：如构造函数，属性和方法等，Java 允许用户借由这个 Class 相关的元信息对象间接调用 Class 对象的功能，这里就是我们经常能见到的 Class 类。")]),s._v(" "),t("h2",{attrs:{id:"类加载子系统作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载子系统作用"}},[s._v("#")]),s._v(" 类加载子系统作用")]),s._v(" "),t("ul",[t("li",[s._v("类加载子系统负责从文件系统或者网络中加载 class 文件，class 文件在文件开头有特定的文件标识 （"),t("strong",[s._v("0xCAFEBABE")]),s._v("）")]),s._v(" "),t("li",[s._v("ClassLoader 只负责 class 文件的加载。至于它是否可以运行，则由 "),t("strong",[s._v("Execution Engine")]),s._v(" 决定")]),s._v(" "),t("li",[s._v("加载的类信息存放于一块称为"),t("strong",[s._v("方法区")]),s._v("的内存空间。除了类的信息外，方法区中还存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是class文件中常量池部分的内存映射）")]),s._v(" "),t("li",[s._v("Class 对象是存放在"),t("strong",[s._v("堆区")]),s._v("的")])]),s._v(" "),t("h2",{attrs:{id:"类加载器-classloader-角色"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载器-classloader-角色"}},[s._v("#")]),s._v(" 类加载器 ClassLoader 角色")]),s._v(" "),t("ol",[t("li",[s._v("class file 存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM 当中来根据这个文件实例化出 n 个一模一样的实例")]),s._v(" "),t("li",[s._v("class file 加载到 JVM 中，被称为 DNA 元数据模板，放在方法区")]),s._v(" "),t("li",[s._v("在 .class 文件 -> JVM -> 最终成为元数据模板，此过程就要一个运输工具（类装载器），扮演一个快递员的角色")])]),s._v(" "),t("h2",{attrs:{id:"类的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的生命周期"}},[s._v("#")]),s._v(" 类的生命周期")]),s._v(" "),t("p",[s._v("类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括："),t("strong",[s._v("加载、验证、准备、解析、初始化、使用和卸载")]),s._v("七个阶段。(验证、准备和解析又统称为连接，为了支持 Java 语言的"),t("strong",[s._v("运行时绑定")]),s._v("，所以"),t("strong",[s._v("解析阶段也可以是在初始化之后进行的")]),s._v("。以上顺序都只是说开始的顺序，实际过程中是交叉的混合式进行的，加载过程中可能就已经开始验证了)\n"),t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/0082zybply1gbnxhplvkrj30yi0d60ty.jpg",alt:"类加载阶段"}})]),s._v(" "),t("h3",{attrs:{id:"加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载"}},[s._v("#")]),s._v(" 加载")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("查找并加载类的二进制数据")])]),t("p",[s._v("加载阶段，虚拟机需要完成以下三件事情：")]),s._v(" "),t("ol",[t("li",[s._v("通过类的"),t("strong",[s._v("全限定名")]),s._v("来获取其定义的二进制字节流")]),s._v(" "),t("li",[s._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构")]),s._v(" "),t("li",[s._v("Java 堆中生成一个代表这个类的 "),t("code",[s._v("java.lang.Class")]),s._v(" 对象，作为对方法区这些数据的访问入口")])]),s._v(" "),t("p",[s._v("加载阶段是相对于其他阶段是可控性最强的阶段，因为开发者可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。")]),s._v(" "),t("p",[s._v("加载阶段完成或，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区中，而在Java堆中创建一个 "),t("code",[s._v("java.lang.Class")]),s._v("对象，这样可以通过该对象访问方法区中的数据")]),s._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"title"}),t("p",[s._v("类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM 规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了"),t("code",[s._v(".class")]),s._v("文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误，如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误")])]),t("p",[s._v("加载"),t("code",[s._v(".class")]),s._v("文件的方式：")]),s._v(" "),t("ul",[t("li",[s._v("从本地系统中直接加载")]),s._v(" "),t("li",[s._v("通过网络下载"),t("code",[s._v(".class")]),s._v("文件，典型场景：Web Applet")]),s._v(" "),t("li",[s._v("从 zip 压缩文件中读取")]),s._v(" "),t("li",[s._v("运行时计算生成，使用最多的是：动态代理技术")]),s._v(" "),t("li",[s._v("由其他文件生成，比如 JSP 应用")]),s._v(" "),t("li",[s._v("从专有数据库中提取，比较少见")]),s._v(" "),t("li",[s._v("从加密文件中获取，典型的防 Class 文件被反编译的保护措施")])]),s._v(" "),t("h3",{attrs:{id:"连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接"}},[s._v("#")]),s._v(" 连接")]),s._v(" "),t("p",[t("strong",[s._v("验证（Verify）")])]),s._v(" "),t("p",[t("strong",[s._v("目的")]),s._v("：确保 class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全\n四个阶段的验证：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("文件格式验证")]),s._v("：验证字节流是否符合 Class 文件格式的规范 🌰 是否以 "),t("code",[s._v("0xCAFEBABE")]),s._v(" 开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型")]),s._v(" "),t("li",[t("strong",[s._v("元数据验证")]),s._v("：对字节码描述的信息进行语义分析(注意: 对比javac编译阶段的语义分析)，以保证其描述的信息符合 Java 语言规范的要求；例如: 这个类是否有父类，除了java.lang.Object之外")]),s._v(" "),t("li",[t("strong",[s._v("字节码验证")]),s._v("：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的")]),s._v(" "),t("li",[t("strong",[s._v("符号引用验证")]),s._v("：确保解析动作能正确执行")])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用 "),t("code",[s._v("-Xverifynone")]),s._v(" 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。")])]),t("p",[t("strong",[s._v("准备（Prepare）")])]),s._v(" "),t("ul",[t("li",[s._v("为"),t("strong",[s._v("类变量")]),s._v("分配内存并且设置该类变量的默认初始值，即零值")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("数据类型")]),s._v(" "),t("th",[s._v("初始值")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("int")]),s._v(" "),t("td",[s._v("0")])]),s._v(" "),t("tr",[t("td",[s._v("long")]),s._v(" "),t("td",[s._v("0L")])]),s._v(" "),t("tr",[t("td",[s._v("short")]),s._v(" "),t("td",[s._v("(short) 0")])]),s._v(" "),t("tr",[t("td",[s._v("char")]),s._v(" "),t("td",[s._v("'\\u0000'")])]),s._v(" "),t("tr",[t("td",[s._v("byte")]),s._v(" "),t("td",[s._v("(byte) 0")])]),s._v(" "),t("tr",[t("td",[s._v("boolean")]),s._v(" "),t("td",[s._v("false")])]),s._v(" "),t("tr",[t("td",[s._v("float")]),s._v(" "),t("td",[s._v("0.0f")])]),s._v(" "),t("tr",[t("td",[s._v("double")]),s._v(" "),t("td",[s._v("0.0d")])]),s._v(" "),t("tr",[t("td",[s._v("reference")]),s._v(" "),t("td",[s._v("null")])])])]),s._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"title"}),t("p",[s._v("准备阶段是正式为"),t("strong",[s._v("类变量")]),s._v("分配内存并设置类变量初始值的阶段，这些内存都将在"),t("strong",[s._v("方法区")]),s._v("中分配")])]),t("ul",[t("li",[s._v("这里不包含用 "),t("strong",[s._v("final")]),s._v(" 修饰的 "),t("code",[s._v("static")]),s._v("，因为 "),t("strong",[s._v("final")]),s._v(" 在编译的时候就会分配了，准备阶段会显示初始化")]),s._v(" "),t("li",[s._v("这里不会为"),t("strong",[s._v("实例变量")]),s._v("分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到 Java 堆中")])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("🌰")]),s._v(" "),t("p",[s._v("假设一个类变量的定义为: "),t("code",[s._v("public static int value = 3")]),s._v("；那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把 "),t("code",[s._v("value")]),s._v(" 赋值为 3 的 "),t("code",[s._v("put static")]),s._v(" 指令是在程序编译后，存放于类构造器"),t("code",[s._v("<clinit>()")]),s._v("方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。")])]),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"title"}),t("p",[s._v("需要注意如下几点：")]),s._v(" "),t("ul",[t("li",[s._v("对基本数据类型来说，对于类变量(static)和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于"),t("strong",[s._v("局部变量")]),s._v("来说，在使用前必须显式地为其赋值，否则"),t("strong",[s._v("编译时")]),s._v("不通过")]),s._v(" "),t("li",[s._v("对于引用数据类型 "),t("code",[s._v("reference")]),s._v(" 来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即 "),t("code",[s._v("null")])]),s._v(" "),t("li",[s._v("如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值")]),s._v(" "),t("li",[s._v("如果类字段的字段属性表中存在 "),t("strong",[s._v("ConstantValue")]),s._v(" 属性，即同时被 "),t("code",[s._v("final")]),s._v(" 和 "),t("code",[s._v("static")]),s._v(" 修饰，那么在准备阶段变量 "),t("code",[s._v("value")]),s._v(" 就会被初始化为 "),t("code",[s._v("ConstValue")]),s._v(" 属性"),t("strong",[s._v("所指定的值")]),s._v("。假设上面的类变量 "),t("code",[s._v("value")]),s._v(" 被定义为: "),t("code",[s._v("public static final int value = 3")]),s._v(" "),t("strong",[s._v("编译时")]),s._v(" Javac 将会为 "),t("code",[s._v("value")]),s._v(" 生成 "),t("strong",[s._v("ConstantValue")]),s._v(" 属性，在准备阶段虚拟机就会根据 "),t("strong",[s._v("ConstantValue")]),s._v(" 的设置将 "),t("code",[s._v("value")]),s._v(" 赋值为3。我们可以理解为 "),t("code",[s._v("static")]),s._v(" "),t("code",[s._v("final")]),s._v(" 常量在编译期就将其结果放入了调用它的类的常量池中")])])]),t("p",[t("strong",[s._v("解析（Resolve）")])]),s._v(" "),t("ul",[t("li",[s._v("将常量池内的符号引用转换为直接引用的过程")]),s._v(" "),t("li",[s._v("事实上，解析操作往往会伴随着 JVM 在"),t("strong",[s._v("执行完初始化之后再执行")])]),s._v(" "),t("li",[s._v("符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《Java虚拟机规范》的 "),t("strong",[s._v("Class")]),s._v(" 文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄")]),s._v(" "),t("li",[s._v("解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的 "),t("code",[s._v("CONSTANT_Class_info")]),s._v("、"),t("code",[s._v("CONSTANT_Fieldref_info")]),s._v("、"),t("code",[s._v("CONSTANT_Methodref_info")]),s._v(" 等")])]),s._v(" "),t("h3",{attrs:{id:"初始化-initialization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化-initialization"}},[s._v("#")]),s._v(" 初始化（Initialization）")]),s._v(" "),t("ul",[t("li",[s._v("初始化阶段就是执行"),t("strong",[s._v("类构造器方法")]),s._v(" "),t("code",[s._v("<clinit>()")]),s._v(" 的过程")]),s._v(" "),t("li",[s._v("此方法不需要定义，是 javac 编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来")]),s._v(" "),t("li",[s._v("构造器方法中指令按语句在源文件中出现的顺序执行")]),s._v(" "),t("li",[t("code",[s._v("<clinit>()")]),s._v(" 不同于类的构造器（构造器是虚拟机视角下的 "),t("code",[s._v("<init>()")]),s._v("）")]),s._v(" "),t("li",[s._v("若该类具有父类，JVM 会保证子类的 "),t("code",[s._v("<clinit>()")]),s._v(" 执行前，父类的 "),t("code",[s._v("<clinit>()")]),s._v(" 已经执行完毕")]),s._v(" "),t("li",[s._v("虚拟机必须保证一个类的 "),t("code",[s._v("<clinit>()")]),s._v(" 方法在多线程下被"),t("strong",[s._v("同步加锁")])])]),s._v(" "),t("p",[s._v("🍭 初始化，为类的静态变量赋予正确的初始值，JVM 负责对类进行初始化，主要对类变量进行初始化。")]),s._v(" "),t("p",[t("strong",[s._v("在Java中对类变量进行初始值设定有两种方式")])]),s._v(" "),t("ul",[t("li",[s._v("声明类变量是指定初始值")]),s._v(" "),t("li",[s._v("使用静态代码块为类变量指定初始值")])]),s._v(" "),t("p",[t("strong",[s._v("JVM 初始化步骤")])]),s._v(" "),t("ul",[t("li",[s._v("假如这个类还没有被加载和连接，则程序先加载并连接该类")]),s._v(" "),t("li",[s._v("假如该类的直接父类还没有被初始化，则先初始化其直接父类")]),s._v(" "),t("li",[s._v("假如类中有初始化语句，则系统依次执行这些初始化语句")])]),s._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"title"}),t("p",[s._v("常问的子类和父类的初始化顺序问题，可以了解一下："),t("a",{attrs:{href:"https://blog.csdn.net/lilamei170607/article/details/82590287?utm_source=blogxgwz7",target:"_blank",rel:"noopener noreferrer"}},[s._v("点击"),t("OutboundLink")],1)])]),t("h3",{attrs:{id:"使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[s._v("#")]),s._v(" 使用")]),s._v(" "),t("p",[s._v("Java 程序对类的使用方式分为："),t("strong",[s._v("主动使用")]),s._v("和"),t("strong",[s._v("被动使用")]),s._v("。虚拟机规范规定"),t("strong",[s._v("有且只有 5 种情况")]),s._v("必须立即对类进行“初始化”，即类的主动使用。")]),s._v(" "),t("ul",[t("li",[s._v("创建类的实例、访问某个类或接口的静态变量，或者对该静态变量赋值、调用类的静态方法（即遇到 "),t("code",[s._v("new")]),s._v("、"),t("code",[s._v("getstatic")]),s._v("、"),t("code",[s._v("putstatic")]),s._v("、"),t("code",[s._v("invokestatic")]),s._v(" 这四条字节码指令时）")]),s._v(" "),t("li",[s._v("反射(如 "),t("code",[s._v('Class.forName("com.pdai.jvm.Test")')]),s._v(" )")]),s._v(" "),t("li",[s._v("初始化一个类的子类")]),s._v(" "),t("li",[s._v("Java 虚拟机启动时被标明为启动类的类")]),s._v(" "),t("li",[s._v("JDK7 开始提供的动态语言支持："),t("code",[s._v("java.lang.invoke.MethodHandle")]),s._v("实例的解析结果，R"),t("code",[s._v("EF_getStatic")]),s._v("、"),t("code",[s._v("REF_putStatic")]),s._v("、"),t("code",[s._v("REF_invokeStatic")]),s._v(" 句柄对应的类没有初始化，则初始化")])]),s._v(" "),t("p",[s._v("除以上五种情况，其他使用 Java 类的方式被看作是对类的被动使用，"),t("strong",[s._v("都不会导致类的初始化")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"卸载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#卸载"}},[s._v("#")]),s._v(" 卸载")]),s._v(" "),t("p",[s._v("Java 虚拟机结束生命周期的几种情况：")]),s._v(" "),t("ul",[t("li",[s._v("执行了 System.exit() 方法")]),s._v(" "),t("li",[s._v("程序正常执行结束")]),s._v(" "),t("li",[s._v("程序在执行过程中遇到异常或者错误而异常终止")]),s._v(" "),t("li",[s._v("操作系统出错导致 Java 虚拟机进程终止")])]),s._v(" "),t("h2",{attrs:{id:"类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[s._v("#")]),s._v(" 类加载器")]),s._v(" "),t("p",[s._v("JVM 支持两种类型的类加载器，分别为"),t("strong",[s._v("引导类加载器（Bootstrap ClassLoader）"),t("strong",[s._v("和")]),s._v("自定义类加载器（User-Defined ClassLoader）")])]),s._v(" "),t("p",[s._v("从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是 Java 虚拟机规范却没有这么定义，而是"),t("strong",[s._v("将所有派生于抽象类 ClassLoader 的类加载器都划分为自定义类加载器")])]),s._v(" "),t("h3",{attrs:{id:"启动类加载器-引导类加载器-bootstrap-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动类加载器-引导类加载器-bootstrap-classloader"}},[s._v("#")]),s._v(" 启动类加载器（引导类加载器，Bootstrap ClassLoader）")]),s._v(" "),t("ul",[t("li",[s._v("这个类加载使用 "),t("strong",[s._v("C/C++")]),s._v(" 语言实现，嵌套在 JVM 内部")]),s._v(" "),t("li",[s._v("它用来加载 Java 的核心库（"),t("code",[s._v("JAVA_HOME/jre/lib/rt.jar")]),s._v("、"),t("code",[s._v("resource.jar")]),s._v("或 "),t("code",[s._v("sun.boot.class.path")]),s._v(" 路径下的内容），用于提供 JVM 自身需要的类")]),s._v(" "),t("li",[s._v("并不继承自 "),t("code",[s._v("java.lang.ClassLoader")]),s._v("，没有父加载器")]),s._v(" "),t("li",[s._v("加载扩展类和应用程序类加载器，并指定为他们的父类加载器")])]),s._v(" "),t("h3",{attrs:{id:"扩展类加载器-extension-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展类加载器-extension-classloader"}},[s._v("#")]),s._v(" 扩展类加载器（Extension ClassLoader）")]),s._v(" "),t("ul",[t("li",[s._v("Java 语言编写，由 "),t("code",[s._v("sun.misc.Launcher$ExtClassLoader")]),s._v(" 实现")]),s._v(" "),t("li",[s._v("派生于 ClassLoader")]),s._v(" "),t("li",[s._v("父类加载器为启动类加载器")]),s._v(" "),t("li",[s._v("从 "),t("code",[s._v("java.ext.dirs")]),s._v(" 系统属性所指定的目录中加载类库，或从 JDK 的安装目录的 "),t("code",[s._v("jre/lib/ext")]),s._v(" 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载")])]),s._v(" "),t("h3",{attrs:{id:"应用程序类加载器-也叫系统类加载器-appclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用程序类加载器-也叫系统类加载器-appclassloader"}},[s._v("#")]),s._v(" 应用程序类加载器（也叫系统类加载器，AppClassLoader）")]),s._v(" "),t("ul",[t("li",[s._v("Java 语言编写，由 "),t("code",[s._v("sun.misc.Lanucher$AppClassLoader")]),s._v(" 实现")]),s._v(" "),t("li",[s._v("派生于 ClassLoader")]),s._v(" "),t("li",[s._v("父类加载器为扩展类加载器")]),s._v(" "),t("li",[s._v("它负责加载环境变量 "),t("code",[s._v("classpath")]),s._v(" 或系统属性 "),t("code",[s._v("java.class.path")]),s._v(" 指定路径下的类库")]),s._v(" "),t("li",[s._v("该类加载是程序中默认的类加载器，一般来说，Java 应用的类都是由它来完成加载的")]),s._v(" "),t("li",[s._v("通过 "),t("code",[s._v("ClassLoader#getSystemClassLoader()")]),s._v(" 方法可以获取到该类加载器")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoaderTest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取系统类加载器")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" systemClassLoader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSystemClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("systemClassLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//sun.misc.Launcher$AppClassLoader@135fbaa4")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取其上层：扩展类加载器")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" extClassLoader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" systemClassLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getParent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("extClassLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//sun.misc.Launcher$ExtClassLoader@2503dbd3")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//再获取其上层：获取不到引导类加载器")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" bootstrapClassLoader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" extClassLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getParent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bootstrapClassLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//null")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对于用户自定义类来说，默认使用系统类加载器进行加载，输出和systemClassLoader一样")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" classLoader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoaderTest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("classLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//sun.misc.Launcher$AppClassLoader@135fbaa4")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//String 类使用引导类加载器进行加载。Java的核心类库都使用引导类加载器进行加载，所以也获取不到")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" classLoader1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("classLoader1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//null")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取BootstrapClassLoader可以加载的api的路径")]),s._v("\n        URL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" urls "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("sun"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("misc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),s._v("Launcher")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBootstrapClassPath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getURLs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("URL url "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" urls"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toExternalForm")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("h3",{attrs:{id:"用户自定义类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户自定义类加载器"}},[s._v("#")]),s._v(" 用户自定义类加载器")]),s._v(" "),t("p",[s._v("在 Java 的日常应用程序开发中，类的加载几乎是由 3 种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("为什么要自定义类加载器？")]),s._v(" "),t("ul",[t("li",[s._v("隔离加载类")]),s._v(" "),t("li",[s._v("修改类加载的方式")]),s._v(" "),t("li",[s._v("扩展加载源（可以从数据库、云端等指定来源加载类）")]),s._v(" "),t("li",[s._v("防止源码泄露（Java 代码容易被反编译，如果加密后，自定义加载器加载类的时候就可以先解密，再加载）")])])]),t("p",[s._v("JVM 必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么 JVM 会将这个类加载器的一个"),t("strong",[s._v("引用作为类型信息的一部分保存在方法区")]),s._v("中。当解析一个类型到另一个类型的引用的时候，JVM 需要保证这两个类型的类加载器是相同的。")]),s._v(" "),t("h3",{attrs:{id:"classloader-常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#classloader-常用方法"}},[s._v("#")]),s._v(" ClassLoader 常用方法")]),s._v(" "),t("p",[s._v("ClassLoader 类，是一个抽象类，其后所有的类加载器都继承自 ClassLoader（不包括启动类加载器）")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("方法")]),s._v(" "),t("th",[s._v("描述")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("getParent()")]),s._v(" "),t("td",[s._v("返回该类加载器的超类加载器")])]),s._v(" "),t("tr",[t("td",[s._v("loadClass(String name)")]),s._v(" "),t("td",[s._v("加载名称为name的类，返回java.lang.Class类的实例")])]),s._v(" "),t("tr",[t("td",[s._v("findClass(String name)")]),s._v(" "),t("td",[s._v("查找名称为name的类，返回java.lang.Class类的实例")])]),s._v(" "),t("tr",[t("td",[s._v("findLoadedClass(String name)")]),s._v(" "),t("td",[s._v("查找名称为name的已经被加载过的类，返回java.lang.Class类的实例")])]),s._v(" "),t("tr",[t("td",[s._v("defineClass(String name, byte[] b, int off, int len)")]),s._v(" "),t("td",[s._v("把字节数组b中内容转换为一个Java类，返回java.lang.Class类的实例")])]),s._v(" "),t("tr",[t("td",[s._v("resolveClass(Class<?> c)")]),s._v(" "),t("td",[s._v("连接指定的一个Java类")])])])]),s._v(" "),t("h3",{attrs:{id:"类的加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的加载"}},[s._v("#")]),s._v(" 类的加载")]),s._v(" "),t("p",[s._v("类加载有三种方式:")]),s._v(" "),t("ol",[t("li",[s._v("命令行启动应用时候由 JVM 初始化加载")]),s._v(" "),t("li",[s._v("通过 "),t("code",[s._v("Class.forName()")]),s._v(" 方法动态加载")]),s._v(" "),t("li",[s._v("通过 "),t("code",[s._v("ClassLoader.loadClass()")]),s._v(" 方法动态加载")])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[t("code",[s._v("Class.forName()")]),s._v(" 和 "),t("code",[s._v("ClassLoader.loadClass()")]),s._v(" 区别?")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Class.forName()")]),s._v(": 将类的 .class 文件加载到 jvm 中之外，还会对类进行解释，执行类中的 "),t("code",[s._v("static")]),s._v(" 块")]),s._v(" "),t("li",[t("code",[s._v("ClassLoader.loadClass()")]),s._v(": 只干一件事情，就是将 .class文件 加载到jvm中，不会执行 "),t("code",[s._v("static")]),s._v(" 中的内容,只有在 "),t("code",[s._v("newInstance")]),s._v(" 才会去执行 "),t("code",[s._v("static")]),s._v(" 块。")]),s._v(" "),t("li",[t("code",[s._v("Class.forName(name, initialize, loader)")]),s._v("：带参函数也可控制是否加载"),t("code",[s._v("static")]),s._v(" 块。并且只有调用了 "),t("code",[s._v("newInstance()")]),s._v(" 方法采用调用构造函数，创建类的对象")])])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("com"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pdai"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("jvm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("classloader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" loaderTest "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" loader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloWorld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用ClassLoader.loadClass()来加载类，不会执行初始化块 ")]),s._v("\n            loader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Test2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用Class.forName()来加载类，默认会执行初始化块 ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//                Class.forName("Test2"); ')]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//使用Class.forName()来加载类，并指定ClassLoader，初始化时不执行静态块 ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//                Class.forName("Test2", false, loader); ')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"静态初始化块执行了！"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h2",{attrs:{id:"jvm-类加载机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-类加载机制"}},[s._v("#")]),s._v(" JVM 类加载机制")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("全盘负责")]),s._v("：当一个类加载器负责加载某个 Class 时，该 Class 所依赖的和引用的其他 Class 也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入")]),s._v(" "),t("li",[t("strong",[s._v("父类委托")]),s._v("：先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类")]),s._v(" "),t("li",[t("strong",[s._v("缓存机制")]),s._v("：缓存机制将会保证所有加载过的 Class 都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该 Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成 Class 对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效")]),s._v(" "),t("li",[t("strong",[s._v("双亲委派机制")]),s._v("：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。")])]),s._v(" "),t("p",[s._v("Java 虚拟机对 class 文件采用的是"),t("strong",[s._v("按需加载")]),s._v("的方式，也就是说当需要使用该类的时候才会将它的 class 文件加载到内存生成 class 对象。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/0082zybply1gbo5vegwfuj30rs0lv45n.jpg",alt:"双亲委派机制图"}})]),s._v(" "),t("p",[t("strong",[s._v("工作流程")])]),s._v(" "),t("ul",[t("li",[s._v("如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；")]),s._v(" "),t("li",[s._v("如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；")]),s._v(" "),t("li",[s._v("如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，如果都加载失败，会抛出异常 "),t("code",[s._v("ClassNotFoundException")])])]),s._v(" "),t("p",[t("strong",[s._v("双亲委派机制有什么优点")])]),s._v(" "),t("ol",[t("li",[s._v("避免类的重复加载，JVM 中区分不同类，不仅仅是根据类名，相同的 class 文件被不同的 ClassLoader 加载就属于两个不同的类（比如，Java 中的 Object 类，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，如果不采用双亲委派模型，由各个类加载器自己去加载的话，系统中会存在多种不同的 Object 类）")]),s._v(" "),t("li",[s._v("保护程序安全，防止核心 API 被随意篡改，避免用户自己编写的类动态替换 Java 的一些核心类，比如我们自定义类：java.lang.String")])]),s._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"title"}),t("p",[s._v("在 JVM 中表示两个 class 对象是否为同一个类存在两个必要条件：")]),s._v(" "),t("ul",[t("li",[s._v("类的完成类名必须一致，包括包名")]),s._v(" "),t("li",[s._v("加载这个类的 ClassLoader（指ClassLoader实例对象）必须相同")])])]),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"title"}),t("p",[s._v("破坏双亲委派模型")]),s._v(" "),t("ul",[t("li",[s._v("双亲委派模型并不是一个强制性的约束模型，而是 Java 设计者推荐给开发者的类加载器实现方式，可以“被破坏”，只要我们自定义类加载器，"),t("strong",[s._v("重写 "),t("code",[s._v("loadClass()")]),s._v(" 方法")]),s._v("，指定新的加载逻辑就破坏了，重写 "),t("code",[s._v("findClass()")]),s._v(" 方法不会破坏双亲委派。")]),s._v(" "),t("li",[s._v("双亲委派模型有一个问题：顶层 ClassLoader，无法加载底层 ClassLoader 的类。典型例子JNDI、JDBC，所以加入了线程上下文类加载器（Thread Context ClassLoader），可以通过 "),t("code",[s._v("Thread.setContextClassLoaser()")]),s._v(" 设置该类加载器，然后顶层 ClassLoader 再使用 "),t("code",[s._v("Thread.getContextClassLoader()")]),s._v(" 获得底层的 ClassLoader 进行加载。")]),s._v(" "),t("li",[s._v("Tomcat 中使用了自定 ClassLoader，并且也破坏了双亲委托机制。每个应用使用 WebAppClassloader 进行单独加载，他首先使用 WebAppClassloader 进行类加载，如果加载不了再委托父加载器去加载，这样可以保证每个应用中的类不冲突。每个 tomcat 中可以部署多个项目，每个项目中存在很多相同的class文件（很多相同的jar包），他们加载到 jvm 中可以做到互不干扰。")]),s._v(" "),t("li",[s._v("利用破坏双亲委派来实现"),t("strong",[s._v("代码热替换")]),s._v("（每次修改类文件，不需要重启服务）。因为一个 Class 只能被一个 ClassLoader 加载一次，否则会报 "),t("code",[s._v("java.lang.LinkageError")]),s._v("。当我们想要实现代码热部署时，可以每次都 "),t("code",[s._v("new")]),s._v(" 一个自定义的 ClassLoader 来加载新的 Class文件。JSP 的实现动态修改就是使用此特性实现。")])])]),t("h2",{attrs:{id:"面试常问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面试常问"}},[s._v("#")]),s._v(" 面试常问")]),s._v(" "),t("ol",[t("li",[s._v("看你简历写得熟悉 JVM，那你说说类的加载过程吧？")]),s._v(" "),t("li",[s._v("我们可以自定义一个 String 类来使用吗？")]),s._v(" "),t("li",[s._v("什么是类加载器，类加载器有哪些？这些类加载器都加载哪些文件？")]),s._v(" "),t("li",[s._v("多线程的情况下，类的加载为什么不会出现重复加载的情况？")]),s._v(" "),t("li",[s._v("什么是双亲委派机制？它有啥优势？可以打破这种机制吗？")])])])}),[],!1,null,null,null);a.default=v.exports}}]);