(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{511:function(s,a,t){"use strict";t.r(a);var e=t(6),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"arthas-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arthas-简介"}},[s._v("#")]),s._v(" Arthas 简介")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://arthas.aliyun.com/doc/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Arthas 用户文档"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方在线教程"),t("OutboundLink")],1)])]),s._v(" "),t("h3",{attrs:{id:"解决什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决什么问题"}},[s._v("#")]),s._v(" 解决什么问题")]),s._v(" "),t("ul",[t("li",[s._v("这个类从哪个 jar 包加载的? 为什么会报各种类相关的 Exception?")]),s._v(" "),t("li",[s._v("我改的代码为什么没有执行到? 难道是我没 commit? 分支搞错了?")]),s._v(" "),t("li",[s._v("遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗?")]),s._v(" "),t("li",[s._v("线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！")]),s._v(" "),t("li",[s._v("是否有一个全局视角来查看系统的运行状况?")]),s._v(" "),t("li",[s._v("有什么办法可以监控到JVM的实时运行状态?")])]),s._v(" "),t("p",[s._v("Arthas支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断")]),s._v(" "),t("h2",{attrs:{id:"场景实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景实战"}},[s._v("#")]),s._v(" 场景实战")]),s._v(" "),t("h3",{attrs:{id:"查看最繁忙的线程-以及是否有阻塞情况发生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看最繁忙的线程-以及是否有阻塞情况发生"}},[s._v("#")]),s._v(" 查看最繁忙的线程，以及是否有阻塞情况发生?")]),s._v(" "),t("p",[s._v("场景：我想看下查看最繁忙的线程，以及是否有阻塞情况发生? 常规查看线程，一般我们可以通过 top 等系统命令进行查看，但是那毕竟要很多个步骤，很麻烦。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("thread -n 3 # 查看最繁忙的三个线程栈信息\nthread  # 以直观的方式展现所有的线程情况\nthread -b #找出当前阻塞其他线程的线程\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"确认某个类是否已被系统加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#确认某个类是否已被系统加载"}},[s._v("#")]),s._v(" 确认某个类是否已被系统加载?")]),s._v(" "),t("p",[s._v("场景：我新写了一个类或者一个方法，我想知道新写的代码是否被部署了?")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# 即可以找到需要的类全路径，如果存在的话\nsc *MyServlet\n\n# 查看这个某个类所有的方法\nsm pdai.tech.servlet.TestMyServlet *\n\n# 查看某个方法的信息，如果存在的话\nsm pdai.tech.servlet.TestMyServlet testMethod\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"如何查看一个class类的源码信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何查看一个class类的源码信息"}},[s._v("#")]),s._v(" 如何查看一个class类的源码信息?")]),s._v(" "),t("p",[s._v("场景：我新修改的内容在方法内部，而上一个步骤只能看到方法，这时候可以反编译看下源码")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# 直接反编译出java 源代码，包含一此额外信息的\njad pdai.tech.servlet.TestMyServlet\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"重要-如何跟踪某个方法的返回值、入参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重要-如何跟踪某个方法的返回值、入参"}},[s._v("#")]),s._v(" 重要：如何跟踪某个方法的返回值、入参.... ?")]),s._v(" "),t("p",[s._v("场景：我想看下我新加的方法在线运行的参数和返回值?")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 同时监控入参，返回值，及异常")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("watch")]),s._v(" pdai.tech.servlet.TestMyServlet testMethod "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{params, returnObj, throwExp}"')]),s._v(" -e -x "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"如何看方法调用栈的信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何看方法调用栈的信息"}},[s._v("#")]),s._v(" 如何看方法调用栈的信息?")]),s._v(" "),t("p",[s._v("场景：我想看下某个方法的调用栈的信息?")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("stack pdai.tech.servlet.TestMyServlet testMethod\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("运行此命令之后需要即时触发方法才会有响应的信息打印在控制台上")]),s._v(" "),t("h3",{attrs:{id:"重要-找到最耗时的方法调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重要-找到最耗时的方法调用"}},[s._v("#")]),s._v(" 重要：找到最耗时的方法调用?")]),s._v(" "),t("p",[s._v("场景：testMethod这个方法入口响应很慢，如何找到最耗时的子调用?")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行的时候每个子调用的运行时长，可以找到最耗时的子调用。")]),s._v("\nstack pdai.tech.servlet.TestMyServlet testMethod\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("运行此命令之后需要即时触发方法才会有响应的信息打印在控制台上，然后一层一层看子调用。")]),s._v(" "),t("h3",{attrs:{id:"重要-如何临时更改代码运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重要-如何临时更改代码运行"}},[s._v("#")]),s._v(" 重要：如何临时更改代码运行?")]),s._v(" "),t("p",[s._v("场景：我找到了问题所在，能否线上直接修改测试，而不需要在本地改了代码后，重新打包部署，然后重启观察效果?")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 先反编译出class源码")]),s._v("\njad --source-only com.example.demo.arthas.user.UserController "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /tmp/UserController.java  \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 然后使用外部工具编辑内容")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mc")]),s._v(" /tmp/UserController.java -d /tmp  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 再编译成class")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 最后，重新载入定义的类，就可以实时验证你的猜测了")]),s._v("\nredefine /tmp/com/example/demo/arthas/user/UserController.class\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("如上，是直接更改线上代码的方式，"),t("strong",[s._v("但是一般好像是编译不成功的")]),s._v("。所以，最好是本地ide编译成 class文件后，再上传替换为好！ 总之，已经完全不用重启和发布了！这个功能真的很方便，比起重启带来的代价，真的是不可比的。比如，重启时可能导致负载重分配，选主等等问题，就不是你能控制的了")])])}),[],!1,null,null,null);a.default=r.exports}}]);